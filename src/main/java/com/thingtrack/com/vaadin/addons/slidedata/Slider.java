package com.thingtrack.com.vaadin.addons.slidedata;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import com.thingtrack.com.vaadin.addons.slidedata.RollView.DisplayMode;
import com.thingtrack.com.vaadin.addons.slidedata.TabSheetView.SelectedTabViewChangeEvent;
import com.thingtrack.com.vaadin.addons.slidedata.TabSheetView.SelectedTabViewChangeListener;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.VerticalLayout;

public class Slider extends CustomComponent {

	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private SlideData slideData;
	@AutoGenerated
	private IkarusBreadCrumb breadCrumb;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private int slideIndex = -1;
	private List<SlideNode> slideNodes = new ArrayList<Slider.SlideNode>();
	
	private SlideChangeListener listenerSlideChange;
	
	private NavigationToolBar navigationToolBar;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public Slider() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		breadCrumb.setStyleName("breadcrumb_style");
		 
		slideData.setSlideNodes(slideNodes);
	}
	
	@SuppressWarnings("serial")
	public void addSlideComponent(int level, String caption, Component slideGridViewComponent, Component slideFormViewComponent) {
		RollView rollView = new RollView(slideGridViewComponent, slideFormViewComponent);
		 
		// check if exist this level to create a new tabsheet or not
		if (existSlideNodeFromLevel(level)) {
			getSlideNodeByLevel(level).getSlideComponent().addTab(rollView, caption);
			
			getSlideNodeByLevel(level).getSlideComponent().hideTabs(false);
		}
		else {
			// create a new TabSheetView for the node
	        TabSheetView slideComponent = new TabSheetView();
	        slideComponent.setSizeFull();  
	        slideComponent.hideTabs(true);
	        
	        // add new tab
	        slideComponent.addTab(rollView, caption);
	        
			// add Component to Slide Data
			slideData.addSlideComponent(slideComponent);
			
			// add Breadcrumb
			Button slideBreadCrumb = addSlideBreadCrumb(caption);
					
			// create the new slide node
			slideNodes.add(new SlideNode(level, caption, slideBreadCrumb, slideComponent));
			
			slideComponent.addListener(new SelectedTabViewChangeListener() {
				@Override
				public void TabViewChange(SelectedTabViewChangeEvent event) {
					if (event.getBindingSource() != null)
						navigationToolBar.setBindingSource(event.getBindingSource());
				}
			});
		}
					
	}
	
	public void slideDisplay(DisplayMode displayMode) {
		// get active SlideNode
		SlideNode activeSlideNode = getActiveSlideNode();
		
		// get active TabSheetView
		TabSheetView activeTabSheetView = activeSlideNode.getSlideComponent();
		
		// get active RollData
		RollView activeRollView = (RollView)activeTabSheetView.getSelectedTab();
				
		// set Display mode
		if (activeRollView != null)
			activeRollView.setDisplayMode(displayMode);
		
	}
	
	public void slideGoto(int level) throws Exception {
		// add slide bread crumb only if go deeper
		if (level > slideIndex)
			addSlideBreadCrumb(level);
				
		// goto slide data
		slideData.slideGoto(level);
		
		// update the actual index slide
		slideIndex = level;
		
	}
				
	private void addSlideBreadCrumb(int level) throws Exception {
		for(SlideNode slideNode : slideNodes) {
			if (slideNode.getLevel() == level) {
				breadCrumb.addLink(slideNode.getSlideBreadCrumb());
				
				return;
				
			}
		}
	
		throw new Exception("Slide Node not exist with level: " + level);
	}
	
	public void delSlideBreadCrumb() {
		SlideNode previousSlideNode = slideNodes.get(slideIndex - 1);
		
		try {
			// remove bread crumb
			breadCrumb.select(previousSlideNode.getSlideBreadCrumb());
			
			// got to the previous slide
			slideGoto(slideIndex - 1);
						
			// fire event if it's implemented
			if (listenerSlideChange != null)
				listenerSlideChange.SlideChange(new SlideChangeEvent(slideIndex - 1, previousSlideNode.getSlideComponent()));
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@SuppressWarnings("serial")
	private Button addSlideBreadCrumb(String caption) {
		// create a new breadcrumb
		Button slideBreadCrumb = new Button(caption);
		
		slideBreadCrumb.addListener(new ClickListener() {	
			@Override
			public void buttonClick(ClickEvent event) {
				SlideNode slideNode = getSlideNodeByBreadCrumb(event.getButton());
			
				if (slideNode.getLevel() != slideIndex ) {
					try {
						slideGoto(slideNode.getLevel());
						
						if (listenerSlideChange != null)
							listenerSlideChange.SlideChange(new SlideChangeEvent(slideNode.getLevel(), slideNode.getSlideComponent()));
						
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
					
			}
		});
				
		return slideBreadCrumb;
	}
	
	private SlideNode getActiveSlideNode() {
		return getSlideNodeByLevel(slideIndex);
		
	}
	
	private SlideNode getSlideNodeByLevel(int level) {
		for(SlideNode slideNode : slideNodes) {
			if (slideNode.getLevel() == level)
				return slideNode;

		}
		
		return null;
		
	}
	
	private SlideNode getSlideNodeByBreadCrumb(Button slideBreadCrumb) {
		for(SlideNode slideNode : slideNodes) {
			if (slideNode.getSlideBreadCrumb().equals(slideBreadCrumb))
				return slideNode;

		}
		
		return null;
		
	}
		
	private boolean existSlideNodeFromLevel(int level) {
		for(SlideNode slideNode : slideNodes) {
			if (slideNode.getLevel() == level)
				return true;

		}
		
		return false;
		
	}
	
	public int getMaxLevel() {
		return slideNodes.size();
		
	}
	
	public class SlideNode {
		private int level;
		private String caption;
		private Button slideBreadCrumb;
		private TabSheetView slideComponent;
		
		public SlideNode(int level, String caption, Button slideBreadCrumb, TabSheetView slideComponent) {
			this.level = level;
			this.caption = caption;
			this.slideBreadCrumb = slideBreadCrumb;
			this.slideComponent = slideComponent;
			
		}
		
		public void setLevel(int level) {
			this.level = level;
		}

		public int getLevel() {
			return level;
		}

		public void setCaption(String caption) {
			this.caption = caption;
		}

		public String getCaption() {
			return caption;
		}

		public void setSlideComponent(TabSheetView slideComponent) {
			this.slideComponent = slideComponent;
		}

		public TabSheetView getSlideComponent() {
			return slideComponent;
		}

		public void setSlideBreadCrumb(Button slideBreadCrumb) {
			this.slideBreadCrumb = slideBreadCrumb;
		}

		public Button getSlideBreadCrumb() {
			return slideBreadCrumb;
		}
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// breadCrumb
		breadCrumb = new IkarusBreadCrumb();
		breadCrumb.setImmediate(false);
		breadCrumb.setWidth("100.0%");
		breadCrumb.setHeight("20px");
		mainLayout.addComponent(breadCrumb);
		
		// slideData
		slideData = new SlideData();
		slideData.setImmediate(false);
		slideData.setWidth("100.0%");
		slideData.setHeight("100.0%");
		mainLayout.addComponent(slideData);
		mainLayout.setExpandRatio(slideData, 1.0f);
		
		return mainLayout;
	}
	
	public void addListenerSlideChange(SlideChangeListener listener) {
		this.listenerSlideChange = listener;
		
	}
	
    public void setNavigationToolBar(NavigationToolBar navigationToolBar) {
		this.navigationToolBar = navigationToolBar;
	}

	public NavigationToolBar getNavigationToolBar() {
		return navigationToolBar;
	}

	public interface SlideChangeListener extends Serializable {
        public void SlideChange(SlideChangeEvent event);

    }
		
    public static class SlideChangeEvent {
		private int index;
		private Component slideComponent;
		
		public SlideChangeEvent(int index, Component slideComponent) {			
			this.setIndex(index);
			this.setSlideComponent(slideComponent);
			
		}

		public void setIndex(int index) {
			this.index = index;
		}

		public int getIndex() {
			return index;
		}

		public void setSlideComponent(Component slideComponent) {
			this.slideComponent = slideComponent;
		}

		public Component getSlideComponent() {
			return slideComponent;
		}
		
	 }
}
