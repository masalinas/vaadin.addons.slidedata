package com.thingtrack.com.vaadin.addons.slidedata;

import java.io.Serializable;

import com.thingtrack.com.vaadin.addons.slidedata.BindingSource.IndexChangeEvent;
import com.thingtrack.com.vaadin.addons.slidedata.BindingSource.IndexChangeListener;
import com.thingtrack.com.vaadin.addons.slidedata.RollView.DisplayMode;
import com.thingtrack.com.vaadin.addons.slidedata.Slider.SlideChangeEvent;
import com.thingtrack.com.vaadin.addons.slidedata.Slider.SlideChangeListener;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.terminal.gwt.client.MouseEventDetails;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;

@SuppressWarnings("serial")
public class NavigationToolBar extends CustomComponent implements BindingSourceComponent, IndexChangeListener, SlideChangeListener {

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private Panel pnToolbar;
	@AutoGenerated
	private HorizontalLayout hlToolbar;
	@AutoGenerated
	private Button btnCancelRegister;
	@AutoGenerated
	private Button btnConfirmRegister;
	@AutoGenerated
	private Embedded imgSeparatorGroup;
	@AutoGenerated
	private Button btnDeleteRegister;
	@AutoGenerated
	private Button btnEditRegister;
	@AutoGenerated
	private Button btnAddRegister;
	@AutoGenerated
	private Button btnRefreshRegister;
	@AutoGenerated
	private Embedded imgSeparator;
	@AutoGenerated
	private Button btnDisplayRegister;
	@AutoGenerated
	private Button btnUpRegister;
	@AutoGenerated
	private Button btnDownRegister;
	@AutoGenerated
	private Button btnLastRegister;
	@AutoGenerated
	private Button btnNextRegister;
	@AutoGenerated
	private Label lblCountRegister;
	@AutoGenerated
	private Button btnPreviousRegister;
	@AutoGenerated
	private Button btnFirstRegister;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private BindingSource<?> bindingSource;
	private Slider slider;
	
	private Object register;
	
	private DisplayMode displayMode = DisplayMode.GRID;
	
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	// navigator button listeners
	private ClickFirstButtonListener listenerFirstButton = null;
	private ClickPreviousButtonListener listenerPreviousButton = null;
	private ClickNextButtonListener listenerNextButton = null;
	private ClickLastButtonListener listenerLastButton = null;
	private ClickDownButtonListener listenerDownButton = null;
	private ClickUpButtonListener listenerUpButton = null;
	private ClickRefreshButtonListener listenerRefreshButton = null;
	private ClickAddButtonListener listenerAddButton = null;
	private ClickEditButtonListener listenerEditButton = null;
	private ClickDeleteButtonListener listenerDeleteButton = null;
	private ClickConfirmButtonListener listenerConfirmButton = null;
	private ClickCancelButtonListener listenerCancelButton = null;
	private ClickDisplayButtonListener listenerDisplayButton = null;
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@Override
	public void setBindingSource(BindingSource<?> bindingSource) {
		this.bindingSource = bindingSource;
		
		// add change index binding sosurce
		bindingSource.addListenerNavigatorToolBar((IndexChangeListener)this);
		
		// initialize binding source
		bindingSource.Initialize();
	}
	
	@Override
	public BindingSource<?> getBindingSource() {
		return this.bindingSource;
		
	}
	
	public void setSlider(Slider slider) {
		this.slider = slider;
		
		slider.addListenerSlideChange((SlideChangeListener)this);
	}
	
	public Slider getSlider() {
		return this.slider;
		
	}
	
	// navigation listener toolbar
	public interface ClickFirstButtonListener extends Serializable {
        public void firstButtonClick(ClickNavigationEvent event);

    }
	
	public interface ClickPreviousButtonListener extends Serializable {
        public void previousButtonClick(ClickNavigationEvent event);

    }
	
	public interface ClickNextButtonListener extends Serializable {
        public void nextButtonClick(ClickNavigationEvent event);

    }
	
	public interface ClickLastButtonListener extends Serializable {
        public void lastButtonClick(ClickNavigationEvent event);

    }

	public interface ClickDownButtonListener extends Serializable {
        public void downButtonClick(ClickNavigationEvent event);

    }
	
	public interface ClickUpButtonListener extends Serializable {
        public void upButtonClick(ClickNavigationEvent event);

    }
	
	public interface ClickDisplayButtonListener extends Serializable {
        public void displayButtonClick(ClickNavigationEvent event);

    }
	
	public interface ClickRefreshButtonListener extends Serializable {
        public void refreshButtonClick(ClickNavigationEvent event);

    }
	
	public interface ClickAddButtonListener extends Serializable {
        public void addButtonClick(ClickNavigationEvent event);

    }
	
	public interface ClickEditButtonListener extends Serializable {
        public void editButtonClick(ClickNavigationEvent event);

    }
	
	public interface ClickDeleteButtonListener extends Serializable {
        public void deleteButtonClick(ClickNavigationEvent event);

    }
		
	public interface ClickConfirmButtonListener extends Serializable {
        public void confirmButtonClick(ClickNavigationEvent event);

    }
	
	public interface ClickCancelButtonListener extends Serializable {
        public void cancelButtonClick(ClickNavigationEvent event);

    }
	
	public class ClickNavigationEvent extends ClickEvent {
		private int index;
		private Object register;
		
		public ClickNavigationEvent(Button button, Component source) {
			button.super(source);
			
		}

		public ClickNavigationEvent(Button button, Component source, MouseEventDetails details) {
			button.super(source, details);
			
		}

		public ClickNavigationEvent(Button button, Component source, MouseEventDetails details, Object register, int index) {
			button.super(source, details);
			
			this.index = index;
			this.register = register;
		}

		public int getIndex() {
			return this.index;
			
		}
		
		public Object getRegister() {
			return this.register;
			
		}
		
	  }
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */	
	public NavigationToolBar() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here	
		// set first button listener
		this.btnDownRegister.setEnabled(false);
		
		// default status for confirmation buttons
		this.btnCancelRegister.setEnabled(false);
		this.btnConfirmRegister.setEnabled(false);
		
		btnFirstRegister.addListener(new Button.ClickListener() {			
			public void buttonClick(com.vaadin.ui.Button.ClickEvent event) {
				// set status register
				register = bindingSource.firstItem();	
				int index = bindingSource.getIndex();
				lblCountRegister.setValue(bindingSource.getIndex() + "/" + bindingSource.size());
				
				btnFirstRegister.setEnabled(false);
				btnPreviousRegister.setEnabled(false);				
				btnNextRegister.setEnabled(true);
				btnLastRegister.setEnabled(true);
				
				// fire event
				if (listenerFirstButton != null)					
					listenerFirstButton.firstButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, index));
				
			}
		});

		// set previous button listener
		btnPreviousRegister.addListener(new Button.ClickListener() {			
			public void buttonClick(com.vaadin.ui.Button.ClickEvent event) {
				// set status register
				register = bindingSource.prevItem();
				int index = bindingSource.getIndex();
				
				lblCountRegister.setValue(index + "/" + bindingSource.size());
				
				if (index == 1) {
					btnFirstRegister.setEnabled(false);
					btnPreviousRegister.setEnabled(false);
					btnNextRegister.setEnabled(true);
					btnLastRegister.setEnabled(true);
				}
				else {
					btnFirstRegister.setEnabled(true);
					btnPreviousRegister.setEnabled(true);
					btnNextRegister.setEnabled(true);
					btnLastRegister.setEnabled(true);
				}
				
				// fire event
				if (listenerPreviousButton != null)					
					listenerPreviousButton.previousButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, index));
				
			}
		});
		
		// set next button listener
		btnNextRegister.addListener(new Button.ClickListener() {				
			public void buttonClick(com.vaadin.ui.Button.ClickEvent event) {
				// set status register
				register = bindingSource.nextItem();
				int index = bindingSource.getIndex();
				
				lblCountRegister.setValue(index + "/" + bindingSource.size());
				
				if (index == bindingSource.size()) {
					btnFirstRegister.setEnabled(true);
					btnPreviousRegister.setEnabled(true);
					btnNextRegister.setEnabled(false);
					btnLastRegister.setEnabled(false);
				}
				else {					
					btnFirstRegister.setEnabled(true);
					btnPreviousRegister.setEnabled(true);
					btnNextRegister.setEnabled(true);
					btnLastRegister.setEnabled(true);
				}
				
				// fire event
				if (listenerNextButton != null)
					listenerNextButton.nextButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, index));
				
			}
		});
		
		// set last button listener
		btnLastRegister.addListener(new Button.ClickListener() {			
			public void buttonClick(com.vaadin.ui.Button.ClickEvent event) {
				// set status register
				register = bindingSource.lastItem();
				int index = bindingSource.getIndex();
				
				lblCountRegister.setValue(bindingSource.getIndex() + "/" + bindingSource.size());
				
				btnFirstRegister.setEnabled(true);
				btnPreviousRegister.setEnabled(true);
				btnNextRegister.setEnabled(false);
				btnLastRegister.setEnabled(false);
				
				// fire event
				if (listenerLastButton != null)
					listenerLastButton.lastButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, index));					
				
			}
		});
		
		btnDownRegister.addListener(new Button.ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {	
				// fire the index change
				bindingSource.setItemId(this, true, bindingSource.getItemId());
				
				// fire the app event if it's implemented
				if (listenerDownButton != null)
					listenerDownButton.downButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, 0));
				
			}
		});
		
		btnDisplayRegister.addListener(new Button.ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {	
				if (displayMode == DisplayMode.GRID) {
					btnDisplayRegister.setCaption("G");			
					displayMode = DisplayMode.CARD;
				}
				else {
					btnDisplayRegister.setCaption("C");
					displayMode = DisplayMode.GRID;
				}
				
				slider.slideDisplay(displayMode);
				
				// fire the app event if it's implemented
				if (listenerDisplayButton != null)
					listenerDisplayButton.displayButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, 0));
				
			}
		});
		
		btnUpRegister.addListener(new Button.ClickListener() {		
			@Override
			public void buttonClick(ClickEvent event) {
				if (slider == null)
					return;
		
				// go slide up
				try {
					slider.delSlideBreadCrumb();
				} catch (Exception e) {
					e.printStackTrace();
				}
				
				// fire the app event if it's implemented
				if (listenerUpButton != null)
					listenerUpButton.upButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, 0));
				
			}
		});
		
		btnRefreshRegister.addListener(new Button.ClickListener() {			
			public void buttonClick(ClickEvent event) {
				if (listenerRefreshButton != null)
					listenerRefreshButton.refreshButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, 0));
				
			}
		});
		
		// set add button listener
		btnAddRegister.addListener(new Button.ClickListener() {			
			public void buttonClick(com.vaadin.ui.Button.ClickEvent event) {
				// enable confirmation buttons
				btnConfirmRegister.setEnabled(true);
				btnCancelRegister.setEnabled(true);
				
				if (listenerAddButton != null)
					listenerAddButton.addButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, 0));					
				
			}
		});
		
		// set edit button listener
		btnEditRegister.addListener(new Button.ClickListener() {			
			public void buttonClick(com.vaadin.ui.Button.ClickEvent event) {
				// enable confirmation buttons
				btnConfirmRegister.setEnabled(true);
				btnCancelRegister.setEnabled(true);
				
				int index = bindingSource.getIndex();
				register = bindingSource.getItemId();
				
				if (listenerEditButton != null)									
					listenerEditButton.editButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, index));				
				
			}
		});
		
		// set delete button listener
		btnDeleteRegister.addListener(new Button.ClickListener() {			
			public void buttonClick(com.vaadin.ui.Button.ClickEvent event) {
				int index = bindingSource.getIndex();
				register = bindingSource.getItemId();
				
				if (listenerDeleteButton != null)					
					listenerDeleteButton.deleteButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, index));				
				
			}
		});
		
		// set confirm button listener
		btnConfirmRegister.addListener(new Button.ClickListener() {			
			public void buttonClick(com.vaadin.ui.Button.ClickEvent event) {				
				int index = bindingSource.getIndex();
				register = bindingSource.getItemId();
				
				if (listenerConfirmButton != null)					
					listenerConfirmButton.confirmButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, index));				
				
				// disable confirmation buttons
				btnConfirmRegister.setEnabled(false);
				btnCancelRegister.setEnabled(false);
				
			}
		});
		
		// set cancel button listener
		btnCancelRegister.addListener(new Button.ClickListener() {			
			public void buttonClick(com.vaadin.ui.Button.ClickEvent event) {
				int index = bindingSource.getIndex();
				register = bindingSource.getItemId();
				
				if (listenerCancelButton != null)					
					listenerCancelButton.cancelButtonClick(new ClickNavigationEvent(event.getButton(), event.getComponent() , null, register, index));	
				
				// disable confirmation buttons
				btnConfirmRegister.setEnabled(false);
				btnCancelRegister.setEnabled(false);
				
			}
		});
	}
	
	public void addListenerFirstButton(ClickFirstButtonListener listener) {
		this.listenerFirstButton = listener;
		
	}
	
	public void addListenerPreviousButton(ClickPreviousButtonListener listener) {
		this.listenerPreviousButton = listener;
		
	}
	
	public void addListenerRefreshButton(ClickRefreshButtonListener listener) {
		this.listenerRefreshButton = listener;
		
	}
	
	public void addListenerNextButton(ClickNextButtonListener listener) {
		this.listenerNextButton = listener;
		
	}
	
	public void addListenerLastButton(ClickLastButtonListener listener) {
		this.listenerLastButton = listener;
		
	}

	public void addListenerDownButton(ClickDownButtonListener listener) {
		this.listenerDownButton = listener;
		
	}
	
	public void addListenerUpButton(ClickUpButtonListener listener) {
		this.listenerUpButton = listener;
		
	}
	
	public void addListenerDisplayButton(ClickDisplayButtonListener listener) {
		this.listenerDisplayButton = listener;
		
	}
	
	public void addListenerAddButton(ClickAddButtonListener listener) {
		this.listenerAddButton = listener;
		
	}
	
	public void addListenerEditButton(ClickEditButtonListener listener) {
		this.listenerEditButton = listener;
		
	}
	
	public void addListenerDeleteButton(ClickDeleteButtonListener listener) {
		this.listenerDeleteButton = listener;
		
	}
	
	public void addListenerConfirmButton(ClickConfirmButtonListener listener) {
		this.listenerConfirmButton = listener;
		
	}
	
	public void addListenerCancelButton(ClickCancelButtonListener listener) {
		this.listenerCancelButton = listener;
		
	}
	
	public void setCountRegister(String message) {
		this.lblCountRegister.setValue(message);
		
	}
	
	@Override
	public void bindingSourceIndexChange(IndexChangeEvent event) {		
		if (bindingSource != null) {
			lblCountRegister.setValue(event.getIndex() + "/" + bindingSource.size());
			
			// set horizontal status navigation buttons
			if (event.getIndex() == 1) {
				btnFirstRegister.setEnabled(false);
				btnPreviousRegister.setEnabled(false);
				btnNextRegister.setEnabled(true);
				btnLastRegister.setEnabled(true);
			}
			else if (event.getIndex() == bindingSource.size()){
				btnFirstRegister.setEnabled(true);
				btnPreviousRegister.setEnabled(true);
				btnNextRegister.setEnabled(false);
				btnLastRegister.setEnabled(false);
			}
			else {
				btnFirstRegister.setEnabled(true);
				btnPreviousRegister.setEnabled(true);				
				btnNextRegister.setEnabled(true);
				btnLastRegister.setEnabled(true);
			}
			
			// set level status navigation buttons
			if (bindingSource.getLevel() == slider.getMaxLevel() - 1) {
				btnDownRegister.setEnabled(false);
				btnUpRegister.setEnabled(true);
			}
			else if (bindingSource.getLevel() == 0) {
				btnDownRegister.setEnabled(true);
				btnUpRegister.setEnabled(false);
			}
			else {
				btnDownRegister.setEnabled(true);
				btnUpRegister.setEnabled(true);
			}
		}
		
	}

	@Override
	public void SlideChange(SlideChangeEvent event) {				
		BindingSourceComponent bindingSourceComponent = (BindingSourceComponent)event.getSlideComponent();
			
		// initialize Display Mode
		this.displayMode = DisplayMode.GRID;
		
		if (bindingSourceComponent.getBindingSource() != null) 			
			setBindingSource(bindingSourceComponent.getBindingSource());
		
	}

	public DisplayMode getDisplayMode() {
		return displayMode;
		
	}
	
	public void setDisplayMode(DisplayMode displayMode) {
		this.displayMode = displayMode;
		
	}
	
	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("-1px");
		mainLayout.setHeight("29px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("-1px");
		setHeight("29px");
		
		// pnToolbar
		pnToolbar = buildPnToolbar();
		mainLayout.addComponent(pnToolbar);
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPnToolbar() {
		// common part: create layout
		pnToolbar = new Panel();
		pnToolbar.setImmediate(false);
		pnToolbar.setWidth("100.0%");
		pnToolbar.setHeight("100.0%");
		
		// hlToolbar
		hlToolbar = buildHlToolbar();
		pnToolbar.setContent(hlToolbar);
		
		return pnToolbar;
	}

	@AutoGenerated
	private HorizontalLayout buildHlToolbar() {
		// common part: create layout
		hlToolbar = new HorizontalLayout();
		hlToolbar.setImmediate(false);
		hlToolbar.setWidth("100.0%");
		hlToolbar.setHeight("100.0%");
		hlToolbar.setMargin(false);
		
		// btnFirstRegister
		btnFirstRegister = new Button();
		btnFirstRegister.setCaption("<<");
		btnFirstRegister.setImmediate(true);
		btnFirstRegister.setWidth("-1px");
		btnFirstRegister.setHeight("-1px");
		hlToolbar.addComponent(btnFirstRegister);
		
		// btnPreviousRegister
		btnPreviousRegister = new Button();
		btnPreviousRegister.setCaption("<");
		btnPreviousRegister.setImmediate(true);
		btnPreviousRegister.setWidth("-1px");
		btnPreviousRegister.setHeight("-1px");
		btnPreviousRegister.setTabIndex(1);
		hlToolbar.addComponent(btnPreviousRegister);
		
		// lblCountRegister
		lblCountRegister = new Label();
		lblCountRegister.setStyleName("nav-toolbar-separator");
		lblCountRegister.setImmediate(false);
		lblCountRegister.setWidth("50px");
		lblCountRegister.setHeight("-1px");
		lblCountRegister.setValue("1/1");
		hlToolbar.addComponent(lblCountRegister);
		hlToolbar.setComponentAlignment(lblCountRegister, new Alignment(48));
		
		// btnNextRegister
		btnNextRegister = new Button();
		btnNextRegister.setCaption(">");
		btnNextRegister.setImmediate(true);
		btnNextRegister.setWidth("-1px");
		btnNextRegister.setHeight("-1px");
		btnNextRegister.setTabIndex(2);
		hlToolbar.addComponent(btnNextRegister);
		
		// btnLastRegister
		btnLastRegister = new Button();
		btnLastRegister.setCaption(">>");
		btnLastRegister.setImmediate(true);
		btnLastRegister.setWidth("-1px");
		btnLastRegister.setHeight("-1px");
		btnLastRegister.setTabIndex(3);
		hlToolbar.addComponent(btnLastRegister);
		
		// btnDownRegister
		btnDownRegister = new Button();
		btnDownRegister.setCaption("v");
		btnDownRegister.setImmediate(true);
		btnDownRegister.setWidth("-1px");
		btnDownRegister.setHeight("-1px");
		hlToolbar.addComponent(btnDownRegister);
		
		// btnUpRegister
		btnUpRegister = new Button();
		btnUpRegister.setCaption("^");
		btnUpRegister.setImmediate(true);
		btnUpRegister.setWidth("-1px");
		btnUpRegister.setHeight("-1px");
		hlToolbar.addComponent(btnUpRegister);
		
		// btnDisplayRegister
		btnDisplayRegister = new Button();
		btnDisplayRegister.setCaption("C");
		btnDisplayRegister.setImmediate(false);
		btnDisplayRegister.setWidth("-1px");
		btnDisplayRegister.setHeight("-1px");
		hlToolbar.addComponent(btnDisplayRegister);
		
		// imgSeparator
		imgSeparator = new Embedded();
		imgSeparator.setImmediate(false);
		imgSeparator.setWidth("-1px");
		imgSeparator.setHeight("-1px");
		imgSeparator.setSource(new ThemeResource(
				"../konekti/images/separator.png"));
		imgSeparator.setType(1);
		imgSeparator.setMimeType("image/png");
		hlToolbar.addComponent(imgSeparator);
		
		// btnRefreshRegister
		btnRefreshRegister = new Button();
		btnRefreshRegister.setCaption("R");
		btnRefreshRegister.setImmediate(true);
		btnRefreshRegister.setWidth("-1px");
		btnRefreshRegister.setHeight("-1px");
		hlToolbar.addComponent(btnRefreshRegister);
		
		// btnAddRegister
		btnAddRegister = new Button();
		btnAddRegister.setCaption("A");
		btnAddRegister.setImmediate(true);
		btnAddRegister.setWidth("-1px");
		btnAddRegister.setHeight("-1px");
		hlToolbar.addComponent(btnAddRegister);
		
		// btnEditRegister
		btnEditRegister = new Button();
		btnEditRegister.setCaption("U");
		btnEditRegister.setImmediate(true);
		btnEditRegister.setWidth("-1px");
		btnEditRegister.setHeight("-1px");
		hlToolbar.addComponent(btnEditRegister);
		
		// btnDeleteRegister
		btnDeleteRegister = new Button();
		btnDeleteRegister.setCaption("D");
		btnDeleteRegister.setImmediate(true);
		btnDeleteRegister.setWidth("-1px");
		btnDeleteRegister.setHeight("-1px");
		hlToolbar.addComponent(btnDeleteRegister);
		
		// imgSeparatorGroup
		imgSeparatorGroup = new Embedded();
		imgSeparatorGroup.setImmediate(false);
		imgSeparatorGroup.setWidth("-1px");
		imgSeparatorGroup.setHeight("-1px");
		imgSeparatorGroup.setSource(new ThemeResource(
				"../konekti/images/separator_group.png"));
		imgSeparatorGroup.setType(1);
		imgSeparatorGroup.setMimeType("image/png");
		hlToolbar.addComponent(imgSeparatorGroup);
		hlToolbar.setComponentAlignment(imgSeparatorGroup, new Alignment(48));
		
		// btnConfirmRegister
		btnConfirmRegister = new Button();
		btnConfirmRegister.setCaption("[]");
		btnConfirmRegister.setImmediate(true);
		btnConfirmRegister.setWidth("-1px");
		btnConfirmRegister.setHeight("-1px");
		hlToolbar.addComponent(btnConfirmRegister);
		
		// btnCancelRegister
		btnCancelRegister = new Button();
		btnCancelRegister.setCaption("X");
		btnCancelRegister.setImmediate(true);
		btnCancelRegister.setWidth("-1px");
		btnCancelRegister.setHeight("-1px");
		hlToolbar.addComponent(btnCancelRegister);
		
		return hlToolbar;
	}

}
